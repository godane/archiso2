# args: source, mountpoint
_mnt_aufs() {
    src="${1}"
    mnt="${2}"
    msg "::: Adding new aufs branch: ${src} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount -t aufs -o remount,add:1:"${src}"=ro none "${mnt}"
}

# args: source, mountpoint
_mnt_bind() {
    src="${1}"
    mnt="${2}"
    msg "::: Binding ${src} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount -o bind "${src}" "${mnt}"
}

# args: source, mountpoint
_mnt_move() {
    src="${1}"
    mnt="${2}"
    msg "::: Moving ${src} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount -o move "${src}" "${mnt}"
}

_mnt_iso() {
    img="${1}"
    #mnt="${2}"
    mnt="/mnt/findiso"
    msg "::: Mounting ${img} to ${mnt}"
    mkdir -p "${mnt}"
    mount -r -t iso9660 "${img}" "${mnt}"
}

# args: /path/to/image_file, mountpoint
_mnt_squashfs() {
    img="${1}"
    mnt="${2}"
    img_fullname="${img##*/}";
    img_name="${img_fullname%.*}"
    tmp_mnt="/tmpfs/mnt/${img_name}"

    if [ "${copytoram}" = "y" ]; then
        msg -n ":: Copying squashfs image to RAM..."
        /bin/cp "${img}" "/tmpfs.sqfs/${img_fullname}"
        img="/tmpfs.sqfs/${img_fullname}"
        msg "done."
    fi

    mkdir -p "${tmp_mnt}"
    /bin/mount -r -t squashfs "${img}" "${tmp_mnt}"

    #if [ "/${mnt#/*/}" = "/" ]; then
        _mnt_aufs "${tmp_mnt}" "${mnt}"
    #else
    #    _mnt_bind "${tmp_mnt}" "${mnt}"
    #fi
}

_find_label() {

    FSTYPE=$(blkid -o value -s TYPE -p ${archisodevice} 2> /dev/null)
    if [ -n "${FSTYPE}" ]; then
        if mount -r -t "${FSTYPE}" ${archisodevice} /bootmnt > /dev/null 2>&1; then
            if [ -e "/bootmnt/${cdname}/${sgnfile}" ]; then
                echo "SUCCESS: Mounted archiso volume successfully."
                BOOT_MOUNT=/bootmnt
                found="1"
            else
                echo "ERROR: Mounting was successful, but the /bootmnt/${cdname}/${sgnfile} file does not exist."
                found="0"
            fi
        else
            echo "ERROR; Failed to mount ${archisodevice} (FS is ${FSTYPE})"
            found="0"
        fi
    else
        echo "ERROR: ${archisodevice} found, but the filesystem type is unknown."
        found="0"
    fi
}

_find_device() {
    msg "Scanning drives: "
    for device in /dev/hd[a-z] /dev/sr[0-9]* /dev/scd[a-z] /dev/sd[a-z][0-9] /dev/sg[0-9]*; do
        [ ! -e "${device}" ] && continue
        FSTYPE=$(blkid -o value -s TYPE ${device})
        bootmnt="/mnt/${device##*/}"
        #bootmnt="/bootmnt"
        mkdir -p "${bootmnt}"
        if mount -t ${FSTYPE} "${device}" "${bootmnt}" >/dev/null 2>&1; then
            if [ -f "${bootmnt}/${findiso}" ]; then
                found=1
                msg "${device}"; echo
                BOOT_MOUNT="${bootmnt}"
                break
            elif [ "x${from}" != "x" ]; then
                from=${from##*/}
                if [ -f "${bootmnt}/${from}/${cdname}/${sgnfile}" ]; then
                    found=1
                    msg "${device}"; echo
                    BOOT_MOUNT="${bootmnt}"
                    break
                fi
            else
                if [ -f "${bootmnt}/${cdname}/${sgnfile}" ]; then
                    found=1
                    msg "${device}"; echo
                    BOOT_MOUNT="${bootmnt}"
                    break
                fi
            fi   
        else
            msg "uhm"; echo
            err "Failed to mount ${device} (FS is ${FSTYPE})"
        fi
        [ ${found} -eq 0 ] && umount -l "${bootmnt}" >/dev/null 2>&1
    done
    export found
    export archisodevice="${device}"
    export BOOT_MOUNT
}

_find_iso() {
    #newroot=${1}
    if [ -f "${BOOT_MOUNT}/${findiso}" ]; then
        _mnt_iso "${BOOT_MOUNT}/${findiso}"
        BOOT_ORIG="${BOOT_MOUNT}"
        BOOT_MOUNT="/mnt/findiso"
    fi

    if [ -f "${BOOT_MOUNT}/${cdname}/${sgnfile}" ]; then
        found=1
    else
        found=0
    fi

    export BOOT_MOUNT
    export BOOT_ORIG
}

copy_fs () {
    FOLDERS="bin etc hooks lib sbin usr"
    for i in ${FOLDERS}; do
        cp -a ${FOLDERS} /new_root
    done

    cp -a /linuxrc /new_root/sbin/init
    cp -a /liblinuxlive /new_root/liblinuxlive
    mkdir -p /new_root/proc
    mkdir -p /new_root/var/log
    mkdir -p /new_root/sys
    mkdir -p /new_root/tmp
    mkdir -p /new_root/dev
}

run_hook () {

    . /liblinuxlive

    if [ "x${arch}" = "x" ]; then
        arch="$(uname -m)"
    fi

    if [ "x${tmpfs_size}" = "x" ]; then
        tmpfs_size="75%"
    fi

    if [ "x${tmpfs_sqfs_size}" = "x" ]; then
        tmpfs_sqfs_size="75%"
    fi

    if [ "x${cdname}" != "x" ]; then
        cdname="$(cmdline_value cdname)"
    else
        cdname="${LIVECDNAME}"
    fi

    if [ "x${sgnfile}" = "x" ]; then
        sgnfile="livecd.sgn"
    fi

    if [ "x${archisolabel}" != "x" ]; then
        if [ "x${archisodevice}" = "x" ]; then
            archisodevice="/dev/disk/by-label/${archisolabel}"
        fi
    fi

    # set mount handler for archiso
    mount_handler="archiso_mount_handler"
}

archiso_mount_handler() {
    newroot="${1}"

    msg -n ":: Mounting newroot, size=${tmpfs_size}..."
    mount -t tmpfs -o "size=${tmpfs_size}" tmpfs /new_root
    msg "done."

    usbdelay=1
    usbdelay=$(( ${usbdelay:-0} + 1 ))
    msg "Waiting ${usbdelay}s for USB devices"
    sleep "${usbdelay}"

    found=0

    modprobe -q loop max_loop=255 >/dev/null 2>&1
    modprobe -q isofs >/dev/null 2>&1
    modprobe -q ext4 >/dev/null 2>&1

    if [ "x${archisodevice}" != "x" ]; then
        #msg ":: Waiting for boot device..."
        #while ! poll_device ${archisodevice} 30; do
        #    echo "ERROR: boot device didn't show up after 30 seconds..."
        #    echo "   Falling back to interactive prompt"
        #    echo "   You can try to fix the problem manually, log out when you are finished"
        #    launch_interactive_shell
        #done
        _find_label
    else
        _find_device
    fi

    if [ "${found}" = "0" ]; then
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi

    if [ "x${findiso}" != "x" ]; then
        _find_iso
    fi

    msg ":: copying filesystem..."
    copy_fs

    # Move our bootmnt dir into the live system
    echo "tmpfs / tmpfs defaults 0 0" > ${newroot}/etc/fstab
    _mnt_move ${BOOT_MOUNT} ${newroot}/mnt/${BOOT_MOUNT##*/}

    if [ "x${findiso}" != "x" ]; then
        _mnt_move ${BOOT_ORIG} ${newroot}/mnt/${BOOT_ORIG##*/}
    fi

    if [ "${break}" = "y" ]; then
        msg ":: Break requested, type 'exit' to resume operation"
        launch_interactive_shell
    fi

    if [ "${copy2ram}" != "y" ]; then
        if [ "${FSTYPE}" = "iso9660" ] || [ "${FSTYPE}" = "udf" ]; then
            if [ -d /proc/sys/dev/cdrom ]; then
                echo 0 > /proc/sys/dev/cdrom/lock
                echo 0 > /proc/sys/dev/cdrom/autoeject
            fi
        fi
    fi
}

# vim:ft=sh:ts=4:sw=4:et:
